// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main

struct InteractionItem
{
    float startPos;
    float endPos;
    float velX;
    float velY;
};

#define PI 3.1415927
#define PI_2 6.2831853

// exposed properties

// Main
RWStructuredBuffer<InteractionItem> _InteractionBuffer;
uint _NumInteractionItems;

float _WaveBufferPixelsPerUnit;
RWTexture2D<float> _WaveBufferPrePre;
RWTexture2D<float> _WaveBufferPre;
RWTexture2D<float> _WaveBufferDest;

float _SpatialScale;
float _WaveConstant2;
float _Decay;
float _DeltaTime;

float _WavePositionLocal;
int _ScrollDeltaPixelPre;
int _ScrollDeltaPixel;

float interactionDelta(float src, uint index, float widthInUnit, InteractionItem item)
{
    float unit = index / _WaveBufferPixelsPerUnit;
    float localPosition = unit - (widthInUnit * 0.5 - _WavePositionLocal);

    float l = item.endPos - item.startPos;
    if(l <= 0) return src;
    
    float c = item.startPos + l * 0.5;
    float p = (localPosition - c) / l * PI_2;
    float w = sin(p) * item.velX * 0.2 + item.velY * 0.5;
    float m = step(-PI, p) * step(p, PI);
    float d = lerp(src, w, 1.0 - pow(1.0 - 0.1, _DeltaTime * 60.0));
    
    return lerp(src, d, m);
}

float getWaveValue(RWTexture2D<float> buffer, int pos, uint bufferWidth)
{
    int clampedPos = (pos + bufferWidth) % bufferWidth;// clamp(pos, 0, bufferWidth);
    float w = buffer[uint2(clampedPos, 0)];
    float edge = (0 <= pos && pos < bufferWidth) ? 1 : 0;

    return w * edge;
}

[numthreads(1024,1,1)]
void Main(uint3 dtid : SV_DispatchThreadID)
{
    float dx = max(0.001, _SpatialScale) / _WaveBufferPixelsPerUnit;
    float dt = _DeltaTime;
    float c2 = _WaveConstant2;

    float k = c2 * dt * dt / (dx * dx);

    uint id = dtid.x;

    uint waveBufferSize;
    uint _;

    _WaveBufferPrePre.GetDimensions(waveBufferSize, _);

    int index = clamp(id, 0, waveBufferSize);
    
    // scroll
    int index_prepre = id + _ScrollDeltaPixel + _ScrollDeltaPixelPre;
    int index_pre = id + _ScrollDeltaPixel;
    int index_l = id - 1 + _ScrollDeltaPixel;
    int index_r = id + 1 + _ScrollDeltaPixel;

    float c_prepre = getWaveValue(_WaveBufferPrePre, index_prepre, waveBufferSize);

    float c_pre_l = getWaveValue(_WaveBufferPre, index_l, waveBufferSize);
    float c_pre = getWaveValue(_WaveBufferPre, index_pre, waveBufferSize);
    float c_pre_r = getWaveValue(_WaveBufferPre, index_r, waveBufferSize);

    // wave equation
    float w = (c_pre_r + c_pre_l - 2.0 * c_pre) * k - c_prepre + 2.0 * c_pre;

    // decay
    w = lerp(w, 0, 1.0 - pow(abs(1.0 - _Decay), _DeltaTime));

    float widthInUnit = waveBufferSize / _WaveBufferPixelsPerUnit;

    for (uint i = 0; i < _NumInteractionItems; i++)
    {
        InteractionItem item = _InteractionBuffer[i];

        w = interactionDelta(w, id, widthInUnit, item);
        
    }

    _WaveBufferDest[uint2(index, 0)] = w;
}
