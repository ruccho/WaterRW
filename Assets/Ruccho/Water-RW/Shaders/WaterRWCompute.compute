// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main

struct InteractionItem
{
    float startPos;
    float endPos;
    float velX;
    float velY;
};

#define PI 3.1415927
#define PI_2 6.2831853

// exposed properties

// Main
RWStructuredBuffer<InteractionItem> _InteractionBuffer;
uint _NumInteractionItems;

float _WaveBufferPixelsPerUnit;
RWTexture2D<float> _WaveBufferPrePreDest;
RWTexture2D<float> _WaveBufferPreSrc;

float _SpatialScale;
float _WaveConstant2;
float _Decay;
float _DeltaTime;

// Index

RWStructuredBuffer<uint> _MeshIndexBuffer;


float interactionDelta(float src, uint index, float widthInUnit, InteractionItem item)
{
    float unit = index / _WaveBufferPixelsPerUnit;
    float localPosition = unit - widthInUnit * 0.5;

    float l = item.endPos - item.startPos;
    float c = item.startPos + l * 0.5;
    float p = (localPosition - c) / l * PI_2;
    float w = sin(p) * item.velX * 0.2 + item.velY * 0.5;
    float m = step(-PI, p) * step(p, PI);
    float d = lerp(src, w, 1.0 - pow(1.0 - 0.1, _DeltaTime * 60.0));
    
    return lerp(src, d, m);
}


[numthreads(1024,1,1)]
void Main(uint3 dtid : SV_DispatchThreadID)
{
    float dx = max(0.01, _SpatialScale) / _WaveBufferPixelsPerUnit;
    float dt = _DeltaTime;
    float c2 = _WaveConstant2;

    float k = c2 * dt * dt / (dx * dx);

    uint id = dtid.x;

    uint waveBufferSize;
    uint _;

    _WaveBufferPrePreDest.GetDimensions(waveBufferSize, _);

    uint index = clamp(id, 0, waveBufferSize);
    uint index_l = clamp(id - 1, 0, waveBufferSize);
    uint index_r = clamp(id + 1, 0, waveBufferSize);

    float c_prepre = _WaveBufferPrePreDest[uint2(index, 0)];

    float c_pre_l = _WaveBufferPreSrc[uint2(index_l, 0)];
    float c_pre = _WaveBufferPreSrc[uint2(index, 0)];
    float c_pre_r = _WaveBufferPreSrc[uint2(index_r, 0)];

    // wave equation
    float w = (c_pre_r + c_pre_l - 2.0 * c_pre) * k - c_prepre + 2.0 * c_pre;

    // decay
    w = lerp(w, 0, 1.0 - pow(abs(1.0 - _Decay), _DeltaTime));

    float widthInUnit = waveBufferSize / _WaveBufferPixelsPerUnit;

    for (uint i = 0; i < _NumInteractionItems; i++)
    {
        InteractionItem item = _InteractionBuffer[i];

        w = interactionDelta(w, id, widthInUnit, item);
        
    }

    _WaveBufferPrePreDest[uint2(index, 0)] = w;
}
